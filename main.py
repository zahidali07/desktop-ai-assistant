"#!/usr/bin/env python3\n\"\"\"\nDesktop AI Assistant - Main Application\n\nA comprehensive desktop AI assistant that integrates with OpenRouter API\nfor voice-controlled system automation, context awareness, and intelligent task execution.\n\nAuthor: Desktop AI Assistant Project\nVersion: 1.0.0\n\"\"\"\n\nimport asyncio\nimport logging\nimport signal\nimport sys\nimport threading\nimport time\nfrom pathlib import Path\nfrom typing import Dict, Any, Optional\n\n# Import our custom modules\nfrom modules.voice_io import VoiceIO\nfrom modules.openrouter_client import OpenRouterClient\nfrom modules.system_controller import SystemController\nfrom modules.sensor_manager import SensorManager\nfrom modules.context_engine import ContextEngine\nfrom modules.action_planner import ActionPlanner\nfrom config.settings import Config\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('desktop_assistant.log'),\n        logging.StreamHandler(sys.stdout)\n    ]\n)\nlogger = logging.getLogger(__name__)\n\n\nclass DesktopAIAssistant:\n    \"\"\"\n    Main Desktop AI Assistant class that coordinates all components\n    \"\"\"\n    \n    def __init__(self):\n        self.config = Config()\n        self.running = False\n        self.components = {}\n        \n        # Initialize components\n        self._initialize_components()\n        \n        # Setup signal handlers for graceful shutdown\n        signal.signal(signal.SIGINT, self._signal_handler)\n        signal.signal(signal.SIGTERM, self._signal_handler)\n    \n    def _initialize_components(self):\n        \"\"\"Initialize all AI assistant components\"\"\"\n        try:\n            logger.info(\"Initializing Desktop AI Assistant components...\")\n            \n            # Initialize voice I/O\n            self.components['voice_io'] = VoiceIO(self.config)\n            logger.info(\"Voice I/O initialized\")\n            \n            # Initialize OpenRouter client\n            self.components['openrouter'] = OpenRouterClient(self.config)\n            logger.info(\"OpenRouter client initialized\")\n            \n            # Initialize system controller\n            self.components['system_controller'] = SystemController(self.config)\n            logger.info(\"System controller initialized\")\n            \n            # Initialize sensor manager\n            self.components['sensor_manager'] = SensorManager(self.config)\n            logger.info(\"Sensor manager initialized\")\n            \n            # Initialize context engine\n            self.components['context_engine'] = ContextEngine(\n                self.config, \n                self.components['sensor_manager']\n            )\n            logger.info(\"Context engine initialized\")\n            \n            # Initialize action planner\n            self.components['action_planner'] = ActionPlanner(\n                self.config,\n                self.components['openrouter'],\n                self.components['system_controller'],\n                self.components['context_engine']\n            )\n            logger.info(\"Action planner initialized\")\n            \n            logger.info(\"All components initialized successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to initialize components: {e}\")\n            raise\n    \n    def _signal_handler(self, signum, frame):\n        \"\"\"Handle shutdown signals gracefully\"\"\"\n        logger.info(f\"Received signal {signum}, shutting down gracefully...\")\n        self.stop()\n    \n    async def start(self):\n        \"\"\"Start the desktop AI assistant\"\"\"\n        logger.info(\"Starting Desktop AI Assistant...\")\n        self.running = True\n        \n        try:\n            # Start background services\n            await self._start_background_services()\n            \n            # Start main interaction loop\n            await self._main_loop()\n            \n        except Exception as e:\n            logger.error(f\"Error in main loop: {e}\")\n        finally:\n            await self._cleanup()\n    \n    async def _start_background_services(self):\n        \"\"\"Start background monitoring and services\"\"\"\n        logger.info(\"Starting background services...\")\n        \n        # Start sensor monitoring\n        self.components['sensor_manager'].start_monitoring()\n        \n        # Start context engine\n        self.components['context_engine'].start()\n        \n        logger.info(\"Background services started\")\n    \n    async def _main_loop(self):\n        \"\"\"Main interaction loop\"\"\"\n        logger.info(\"Desktop AI Assistant is ready! Say 'Hey Assistant' to start...\")\n        \n        # Initialize voice I/O\n        voice_io = self.components['voice_io']\n        action_planner = self.components['action_planner']\n        \n        while self.running:\n            try:\n                # Listen for wake word or continuous listening\n                if self.config.ALWAYS_LISTENING:\n                    # Continuous listening mode\n                    audio_input = await voice_io.listen_continuous()\n                else:\n                    # Wake word mode\n                    audio_input = await voice_io.listen_for_wake_word()\n                \n                if audio_input:\n                    # Process the voice input\n                    user_text = await voice_io.speech_to_text(audio_input)\n                    \n                    if user_text:\n                        logger.info(f\"User said: {user_text}\")\n                        \n                        # Get current context\n                        context = self.components['context_engine'].get_current_context()\n                        \n                        # Plan and execute action\n                        response = await action_planner.process_request(user_text, context)\n                        \n                        if response:\n                            # Speak the response\n                            await voice_io.text_to_speech(response)\n                            logger.info(f\"Assistant responded: {response}\")\n                \n                # Small delay to prevent excessive CPU usage\n                await asyncio.sleep(0.1)\n                \n            except Exception as e:\n                logger.error(f\"Error in main loop iteration: {e}\")\n                await asyncio.sleep(1)  # Wait before retrying\n    \n    def stop(self):\n        \"\"\"Stop the desktop AI assistant\"\"\"\n        logger.info(\"Stopping Desktop AI Assistant...\")\n        self.running = False\n    \n    async def _cleanup(self):\n        \"\"\"Cleanup resources\"\"\"\n        logger.info(\"Cleaning up resources...\")\n        \n        try:\n            # Stop all components\n            for name, component in self.components.items():\n                if hasattr(component, 'stop'):\n                    component.stop()\n                    logger.info(f\"{name} stopped\")\n            \n            logger.info(\"Cleanup completed\")\n            \n        except Exception as e:\n            logger.error(f\"Error during cleanup: {e}\")\n\n\ndef main():\n    \"\"\"Main entry point\"\"\"\n    print(\"\\n=== Desktop AI Assistant ===")\n    print(\"A voice-controlled AI assistant for desktop automation\")\n    print(\"Press Ctrl+C to exit\\n\")\n    \n    try:\n        # Create and start the assistant\n        assistant = DesktopAIAssistant()\n        \n        # Run the async main loop\n        asyncio.run(assistant.start())\n        \n    except KeyboardInterrupt:\n        print(\"\\nShutdown requested by user\")\n    except Exception as e:\n        logger.error(f\"Fatal error: {e}\")\n        sys.exit(1)\n    finally:\n        print(\"Desktop AI Assistant stopped\")\n\n\nif __name__ == \"__main__\":\n    main()\n"